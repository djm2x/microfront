#!groovy
node {
  def apps = [
    [name: "remote-app", port: '4200', exposed_port: '6002', path: 'remote-app', domaine: "194.163.148.222", domaine_prefix: ''],
    // [name: "home", port: '4200', exposed_port: '6000', path: 'home', domaine: "194.163.148.222", domaine_prefix: ''],
    // [name: "product", port: '4200', exposed_port: '6001', path: 'product', domaine: "194.163.148.222", domaine_prefix: ''],
    // [name: "shell", port: '4200', exposed_port: '6003', path: 'shell', domaine: "194.163.148.222", domaine_prefix: ''],
  ];

  def DOCKER_FILE_NAME = './subApi/Dockerfile'

  def app

  stage('Cloning Git') {
    // def commit = checkout scm
    //  env.BRANCH_NAME = commit.GIT_BRANCH.replace('origin/', '')
    // sh "echo ${commit.GIT_COMMIT}"

    sh "pwd"
    // sh "ls -al"
    // sh "echo ${lastCommit}"


    // sh "git --version"

    //  def lastCommit = sh(script: "git rev-parse --short HEAD", returnStdout: true)

    def lastCommit = sh(script: "git rev-parse HEAD", returnStdout: true)

    // sh "echo $lastCommit"
      def oldCommit = '67caa105b3b286ff221a06d386ef2fb1498cd00f'
    // sh "echo $oldCommit"

    apps.each { e ->
      try {
        // sh  """#!/bin/bash git diff --name-only HEAD@{1} ${lastCommit} | grep remote-app """
        // def changes0 = sh(script: """git diff  --name-only 'HEAD@{1}' ${lastCommit}""", returnStdout: true)
        def changes0 = sh(script: "git diff HEAD@{2} "  + oldCommit + " --name-only", returnStdout: true)

        sh "echo $changes0"

        println("++++++++++++++++++> ${e.name} has some changes, building...")

        // println(changes0 + "----------")
      } catch (err) {
        println("------------------>${e.name} no changes, no build")
        println(err)
      }
    }
  }
}

